#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.

import os
import sys
import locale
import textwrap
import curses
import curses.wrapper
from time import sleep
from threading import Thread, Lock

locale.setlocale(locale.LC_ALL, '')

FG_COLOR = (730, 730, 730)

def wrap(text, cols, off_x=''):
    wt = ''
    for l in text.split('\n'):
        while len(l) > cols:
            wt += l[:cols - 2] + '->' + '\n'
            l = l[cols - 2:]
        wt += off_x + l + '\n'

    return wt[:-1]


def wrapwords(text, cols, off_x=''):
    wt = ''
    for l in text.split('\n'):
        for wl in textwrap.wrap(l, cols):
            wt += off_x + wl.strip() + '\n'
        wt += '\n'

    return wt.rstrip()


def metadata_get(type, artist, title):
    if artist == 'N/A' and title == 'N/A':
        m = 'Not playing'
    else:
        try:
            cache_dir = os.environ['XDG_CACHE_HOME'] + '/cmus-lyrics'
        except KeyError:
            cache_dir = os.environ['HOME'] + '/.cache/cmus-lyrics'
        if not os.path.exists(cache_dir):
            os.makedirs(cache_dir)

        m = os.popen('glyrc %s \
                      -a "%s" \
                      -t "%s" \
                      -v 0 \
                      -w stdout \
                      --callback "cat <path>" \
                      -c %s' % (type, artist, title, cache_dir)) \
                      .read().strip()

        if m == '':
            m = 'No %s found.' % type

    return m


class cmus:
    def status(self):
        if not os.path.exists(os.environ['HOME'] + '/.cmus/socket'):
            sys.exit()

        try:
            s = os.popen('cmus-remote -Q').read()
        except IOError:
            pass
        else:
            try:
                self.artist = s.split('tag artist ')[1].split('\n')[0]
                self.title = s.split('tag title ')[1].split('\n')[0]
            except IndexError:
                self.artist = 'N/A'
                self.title = 'N/A'


class shellfm:
    def status(self):
        if not os.path.exists(os.environ['HOME'] + '/.shell-fm/session'):
            sys.exit()

        try:
            f = open(os.environ['HOME'] + '/.shell-fm/nowplaying')
        except IOError:
            self.artist = 'N/A'
            self.title = 'N/A'
        else:
            s = f.read()
            f.close()
            self.artist, self.title = s.split('|')


class pianobar:
    def status(self):
        try:
            np = os.environ['XDG_CONFIG_HOME'] + '/pianobar/nowplaying'
        except KeyError:
            np = os.environ['HOME'] + '/.config/pianobar/nowplaying'
        try:
            if 'pianobar' not in os.popen('ps -C pianobar').read():
                if os.path.exists(np):
                    os.remove(np)
                sys.exit()
        except IOError:
            pass

        try:
            f = open(np)
        except IOError:
            self.artist = 'N/A'
            self.title = 'N/A'
        else:
            s = f.read().strip()
            f.close()
            self.artist, self.title = s.split('|')


class ui:
    def __init__(self, screen):
        self.off_x = '   '
        self.off_y = 2
        self.quit = False
        self.screen = screen

        self.get_size()
        curses.noecho()
        curses.cbreak()
        curses.curs_set(0)
        curses.start_color()
        #store old value of color 1
        self.color1 = curses.color_content(1)
        curses.init_color(1, *FG_COLOR)
        curses.init_pair(1, 1, curses.COLOR_BLACK)
        self.screen.keypad(1)

        self.type = 'lyrics'

        self.artist = ''
        self.title = ''
        self.lyrics = ''
        self.artistbio = ''

    def finalize(self):
        #restore color 1
        curses.init_color(1, *self.color1)

    def get_size(self):
        self.rows, self.cols = self.screen.getmaxyx()

    def update(self):
        self.pos_y = 0
        if self.type == 'lyrics':
            self.header = self.artist + ' - ' + self.title
            self.text = self.lyrics
            text_wrap = wrap(self.text, self.cols - 1 - len(self.off_x), self.off_x)
        elif self.type == 'artistbio':
            self.header = self.artist
            self.text = self.artistbio
            text_wrap = wrapwords(self.text, self.cols - 1 - len(self.off_x), self.off_x)
        header_wrap = wrap(self.header, self.cols - 1 - len(self.off_x) , self.off_x)
        header_wrap_lines = len(header_wrap.split('\n'))
        text_wrap_lines = len(text_wrap.split('\n'))
        self.pad_lines = header_wrap_lines + 1 + text_wrap_lines

        self.pad = curses.newpad(self.pad_lines + self.rows, self.cols)
        self.pad.addstr(self.off_y, 0, header_wrap,
                curses.A_BOLD | curses.color_pair(1))
        self.pad.addstr(self.off_y + header_wrap_lines + 1, 0,
                text_wrap, curses.color_pair(1))
        self.pad.refresh(0, 0, 0, 0, self.rows - 1, self.cols)

    def control(self):
        while True:
            key = self.screen.getch()

            if key == ord('q'):
                self.finalize()
                self.quit = True

            else:
                if key == curses.KEY_DOWN or key == ord('j'):
                    if self.pos_y < self.pad_lines - self.rows:
                        self.pos_y += 1

                elif key == curses.KEY_NPAGE or key == curses.KEY_RIGHT:
                    if self.pos_y + self.rows < self.pad_lines:
                        self.pos_y += self.rows

                elif key == curses.KEY_END or key == ord('G'):
                    if self.pos_y < self.pad_lines - self.rows:
                        self.pos_y = self.pad_lines - self.rows

                elif key == curses.KEY_UP or key == ord('k'):
                    if self.pos_y > 0:
                        self.pos_y -= 1

                elif key == curses.KEY_PPAGE or key == curses.KEY_LEFT:
                        if self.pos_y - self.rows > 0:
                            self.pos_y -= self.rows
                        else:
                            self.pos_y = 0

                elif key == curses.KEY_HOME or key == ord('g'):
                    self.pos_y = 0

                elif key == curses.KEY_RESIZE:
                    self.get_size()
                    self.update()

                elif key == ord('a'):
                    if self.type == 'lyrics':
                        self.type = 'artistbio'
                    elif self.type == 'artistbio':
                        self.type = 'lyrics'
                    self.update()

                self.pad.refresh(self.pos_y, 0, 0, 0, self.rows - 1, self.cols)

def get_and_update(artist, title, data):
    lyrics = metadata_get('lyrics', artist, title)
    artistbio = metadata_get('artistbio', artist, title)
    data['lock'].acquire()
    try:
        if data['ui'].artist + data['ui'].title == artist + title:
            data['ui'].lyrics = lyrics #update(artist + ' - ' + title, data['lyric'].lyrics)
            data['ui'].artistbio = artistbio #update(artist + ' - ' + title, data['lyric'].lyrics)
            data['ui'].update()
    finally:
        data['lock'].release()


def main(stdscr):
    if player == cmus:
        p = cmus()
    elif player == shellfm:
        p = shellfm()
    elif player == pianobar:
        p = pianobar()

    u = ui(stdscr)

    ui_control = Thread(target=u.control)
    ui_control.daemon = True
    ui_control.start()

    lock = Lock()
    data = {'ui' :  u, 'lock' : lock}

    while True:
        if u.quit == True:
            break

        p.status()

        if p.artist != u.artist or p.title != u.title:
            lock.acquire()
            try:
                u.artist = p.artist
                u.title = p.title
                u.lyrics = 'Downloading lyrics...'
                u.artistbio = 'Downloading artist info...'
                u.update()
            finally:
                lock.release()

            worker = Thread(target=get_and_update, args=(p.artist, p.title, data))
            worker.start()

        sleep(1)


if __name__ == '__main__':
    if os.path.exists(os.environ['HOME'] + '/.cmus/socket'):
        player = cmus
    elif os.path.exists(os.environ['HOME'] + '/.shell-fm/session'):
        player = shellfm
    elif 'pianobar' in os.popen('ps -C pianobar').read():
        player = pianobar
    else:
        print('No supported player found.')
        sys.exit()

    curses.wrapper(main)
